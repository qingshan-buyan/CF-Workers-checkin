let domainList = [];
let userList = [];
let passList = [];
let 签到结果 = "";
let BotToken = '';
let ChatID = '';

export default {
  // HTTP 请求处理函数保持不变
  async fetch(request, env, ctx) {
    await initializeVariables(env);
    const url = new URL(request.url);
    if (url.pathname == "/tg") {
      await sendMessage();
    } else if (url.pathname == `/${pass}`) {
      await checkin();
    }
    return new Response(签到结果, {
      status: 200,
      headers: { 'Content-Type': 'text/plain;charset=UTF-8' }
    });
  },

  // 定时任务处理函数
  async scheduled(controller, env, ctx) {
    console.log('Cron job started');
    try {
      await initializeVariables(env);
      await checkin();
      console.log('Cron job completed successfully');
    } catch (error) {
      console.error('Cron job failed:', error);
      签到结果 = `定时任务执行失败: ${error.message}`;
      await sendMessage(签到结果);
    }
  },
};

async function initializeVariables(env) {
  // 读取并解析环境变量中的多个账号、密码和域名
  domainList = (env.JC || "").split(",").map(item => item.trim());
  userList = (env.ZH || "").split(",").map(item => item.trim());
  passList = (env.MM || "").split(",").map(item => item.trim());

  if (domainList.length !== userList.length || domainList.length !== passList.length) {
    签到结果 = "域名、账号和密码的数量不一致，请检查配置。";
    console.error(签到结果);
    return;
  }

  // 初始化 BotToken 和 ChatID（可选）
  BotToken = env.TGTOKEN || BotToken;
  ChatID = env.TGID || ChatID;

  // 打印调试信息
  签到结果 = `配置的账户信息:\n`;
  domainList.forEach((domain, index) => {
    签到结果 += `账号 ${index + 1}: ${domain} - ${userList[index]}\n`;
  });
  console.log("已加载的账户信息:", 签到结果);
}

async function sendMessage(msg = "") {
  const 账号信息 = `账户信息: \n${domainList.map((domain, index) => `地址: ${domain}\n账号: ${userList[index]}\n密码: <tg-spoiler>${passList[index]}</tg-spoiler>`).join("\n\n")}`;
  const now = new Date();
  const beijingTime = new Date(now.getTime() + 8 * 60 * 60 * 1000);
  const formattedTime = beijingTime.toISOString().slice(0, 19).replace('T', ' ');

  console.log(msg);
  if (BotToken !== '' && ChatID !== '') {
    const url = `https://api.telegram.org/bot${BotToken}/sendMessage?chat_id=${ChatID}&parse_mode=HTML&text=${encodeURIComponent("执行时间: " + formattedTime + "\n" + 账号信息 + "\n\n" + msg)}`;
    return fetch(url, {
      method: 'get',
      headers: {
        'Accept': 'text/html,application/xhtml+xml,application/xml;',
        'Accept-Encoding': 'gzip, deflate, br',
        'User-Agent': 'Mozilla/5.0 Chrome/90.0.4430.72',
      }
    });
  }
}

async function checkin() {
  try {
    if (domainList.length === 0 || userList.length === 0 || passList.length === 0) {
      throw new Error('必需的配置参数缺失');
    }

    for (let i = 0; i < domainList.length; i++) {
      const domain = domainList[i];
      const user = userList[i];
      const pass = passList[i];

      // 登录请求
      const loginResponse = await fetch(`${domain}/auth/login`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/129.0.0.0 Safari/537.36',
          'Accept': 'application/json, text/plain, */*',
          'Origin': domain,
          'Referer': `${domain}/auth/login`,
        },
        body: JSON.stringify({
          email: user,
          passwd: pass,
          remember_me: 'on',
          code: "",
        }),
      });

      console.log(`账号 ${i + 1} - 登录请求状态:`, loginResponse.status);

      if (!loginResponse.ok) {
        const errorText = await loginResponse.text();
        throw new Error(`账号 ${i + 1} 登录请求失败: ${errorText}`);
      }

      const loginJson = await loginResponse.json();
      console.log(`账号 ${i + 1} - 登录响应:`, loginJson);

      if (loginJson.ret !== 1) {
        throw new Error(`账号 ${i + 1} 登录失败: ${loginJson.msg || '未知错误'}`);
      }

      // 获取 Cookie
      const cookieHeader = loginResponse.headers.get('set-cookie');
      if (!cookieHeader) {
        throw new Error(`账号 ${i + 1} 登录成功但未收到Cookie`);
      }

      console.log(`账号 ${i + 1} - 收到Cookie:`, cookieHeader);
      const cookies = cookieHeader.split(',').map(cookie => cookie.split(';')[0]).join('; ');

      // 等待确保登录状态
      await new Promise(resolve => setTimeout(resolve, 1000));

      // 签到请求
      const checkinResponse = await fetch(`${domain}/user/checkin`, {
        method: 'POST',
        headers: {
          'Cookie': cookies,
          'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/129.0.0.0 Safari/537.36',
          'Accept': 'application/json, text/plain, */*',
          'Content-Type': 'application/json',
          'Origin': domain,
          'Referer': `${domain}/user/panel`,
          'X-Requested-With': 'XMLHttpRequest'
        },
      });

      console.log(`账号 ${i + 1} - 签到请求状态:`, checkinResponse.status);

      const responseText = await checkinResponse.text();
      console.log(`账号 ${i + 1} - 签到响应:`, responseText);

      try {
        const checkinResult = JSON.parse(responseText);
        console.log(`账号 ${i + 1} - 签到结果:`, checkinResult);

        if (checkinResult.ret === 1 || checkinResult.ret === 0) {
          签到结果 += `🎉 账号 ${i + 1} 签到结果 🎉\n ${checkinResult.msg || (checkinResult.ret === 1 ? '签到成功' : '签到失败')}\n`;
        } else {
          签到结果 += `🎉 账号 ${i + 1} 签到结果 🎉\n ${checkinResult.msg || '签到结果未知'}\n`;
        }
      } catch (e) {
        if (responseText.includes('登录')) {
          throw new Error(`账号 ${i + 1} 登录状态无效，请检查Cookie处理`);
        }
        throw new Error(`账号 ${i + 1} 解析签到响应失败: ${e.message}\n\n原始响应: ${responseText}`);
      }
    }

    await sendMessage(签到结果);
    return 签到结果;

  } catch (error) {
    console.error('Checkin Error:', error);
    签到结果 = `签到过程发生错误: ${error.message}`;
    await sendMessage(签到结果);
    return 签到结果;
  }
}
