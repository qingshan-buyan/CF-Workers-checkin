let domain = "这里填机场域名";  // 默认域名
let user = "这里填邮箱";  // 默认邮箱
let pass = "这里填密码";  // 默认密码
let 签到结果;
let BotToken = '';
let ChatID = '';

export default {
  // HTTP 请求处理函数保持不变
  async fetch(request, env, ctx) {
    await initializeVariables(env);
    const url = new URL(request.url);
    if (url.pathname == "/tg") {
      await sendMessage();
    } else if (url.pathname == `/${pass}`) {
      await checkin();
    }
    return new Response(签到结果, {
      status: 200,
      headers: { 'Content-Type': 'text/plain;charset=UTF-8' }
    });
  },

  // 定时任务处理函数
  async scheduled(controller, env, ctx) {
    console.log('Cron job started');
    try {
      await initializeVariables(env);
      await checkin();
      console.log('Cron job completed successfully');
    } catch (error) {
      console.error('Cron job failed:', error);
      签到结果 = `定时任务执行失败: ${error.message}`;
      await sendMessage(签到结果);
    }
  },
};

async function initializeVariables(env) {
  domain = env.JC || env.DOMAIN || domain;
  user = env.ZH || env.USER || user;
  pass = env.MM || env.PASS || pass;
  if (!domain.includes("//")) domain = `https://${domain}`;
  BotToken = env.TGTOKEN || BotToken;
  ChatID = env.TGID || ChatID;

  // 解析批量账号信息
  const accounts = (env.ACCOUNTS || "").split(",");
  if (accounts.length > 0) {
    签到结果 = "账户信息: \n";
    accounts.forEach((account, index) => {
      const [accountDomain, accountUser, accountPass] = account.split(":");
      签到结果 += `\n账号 ${index + 1}: ${accountDomain} - ${accountUser}`;
    });
  } else {
    签到结果 = "没有配置任何账号。";
  }
}

async function sendMessage(msg = "") {
  const now = new Date();
  const beijingTime = new Date(now.getTime() + 8 * 60 * 60 * 1000);
  const formattedTime = beijingTime.toISOString().slice(0, 19).replace('T', ' ');
  console.log(msg);
  if (BotToken !== '' && ChatID !== '') {
    const url = `https://api.telegram.org/bot${BotToken}/sendMessage?chat_id=${ChatID}&parse_mode=HTML&text=${encodeURIComponent("执行时间: " + formattedTime + "\n" + msg)}`;
    return fetch(url, {
      method: 'get',
      headers: {
        'Accept': 'text/html,application/xhtml+xml,application/xml;',
        'Accept-Encoding': 'gzip, deflate, br',
        'User-Agent': 'Mozilla/5.0 Chrome/90.0.4430.72',
      }
    });
  }
}

async function checkin() {
  const accounts = (process.env.ACCOUNTS || "").split(",");
  if (accounts.length === 0) {
    签到结果 = "没有配置任何账号。";
    await sendMessage(签到结果);
    return 签到结果;
  }

  for (let i = 0; i < accounts.length; i++) {
    const [accountDomain, accountUser, accountPass] = accounts[i].split(":");
    try {
      签到结果 = `正在处理账号 ${i + 1}:\n地址: ${accountDomain}\n账号: ${accountUser}`;

      // 登录请求
      const loginResponse = await fetch(`${accountDomain}/auth/login`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/129.0.0.0 Safari/537.36',
          'Accept': 'application/json, text/plain, */*',
          'Origin': accountDomain,
          'Referer': `${accountDomain}/auth/login`,
        },
        body: JSON.stringify({
          email: accountUser,
          passwd: accountPass,
          remember_me: 'on',
          code: "",
        }),
      });

      console.log('Login Response Status:', loginResponse.status);

      if (!loginResponse.ok) {
        const errorText = await loginResponse.text();
        throw new Error(`登录请求失败: ${errorText}`);
      }

      const loginJson = await loginResponse.json();
      console.log('Login Response:', loginJson);

      if (loginJson.ret !== 1) {
        throw new Error(`登录失败: ${loginJson.msg || '未知错误'}`);
      }

      // 获取 Cookie
      const cookieHeader = loginResponse.headers.get('set-cookie');
      if (!cookieHeader) {
        throw new Error('登录成功但未收到Cookie');
      }

      console.log('Received cookies:', cookieHeader);
      const cookies = cookieHeader.split(',').map(cookie => cookie.split(';')[0]).join('; ');

      // 等待确保登录状态
      await new Promise(resolve => setTimeout(resolve, 1000));

      // 签到请求
      const checkinResponse = await fetch(`${accountDomain}/user/checkin`, {
        method: 'POST',
        headers: {
          'Cookie': cookies,
          'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/129.0.0.0 Safari/537.36',
          'Accept': 'application/json, text/plain, */*',
          'Content-Type': 'application/json',
          'Origin': accountDomain,
          'Referer': `${accountDomain}/user/panel`,
          'X-Requested-With': 'XMLHttpRequest'
        },
      });

      console.log('Checkin Response Status:', checkinResponse.status);

      const responseText = await checkinResponse.text();
      console.log('Checkin Raw Response:', responseText);

      try {
        const checkinResult = JSON.parse(responseText);
        console.log('Checkin Result:', checkinResult);

        if (checkinResult.ret === 1 || checkinResult.ret === 0) {
          签到结果 = `🎉 账号 ${i + 1} 签到结果 🎉\n ${checkinResult.msg || (checkinResult.ret === 1 ? '签到成功' : '签到失败')}`;
        } else {
          签到结果 = `🎉 账号 ${i + 1} 签到结果 🎉\n ${checkinResult.msg || '签到结果未知'}`;
        }
      } catch (e) {
        if (responseText.includes('登录')) {
          throw new Error('登录状态无效，请检查Cookie处理');
        }
        throw new Error(`解析签到响应失败: ${e.message}\n\n原始响应: ${responseText}`);
      }

      await sendMessage(签到结果);
    } catch (error) {
      console.error(`Checkin Error for account ${i + 1}:`, error);
      签到结果 = `账号 ${i + 1} 签到过程发生错误: ${error.message}`;
      await sendMessage(签到结果);
    }
  }
}
